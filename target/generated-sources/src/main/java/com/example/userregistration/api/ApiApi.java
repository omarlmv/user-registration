/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (5.3.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.example.userregistration.api;

import com.example.userregistration.model.InlineResponse400;
import com.example.userregistration.model.UserRequest;
import com.example.userregistration.model.UserResponse;
import io.swagger.annotations.*;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2024-05-27T04:00:32.117468400-05:00[America/Bogota]")
@Validated
@Api(value = "api", description = "the api API")
public interface ApiApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * POST /api/users/register : Register a new user
     *
     * @param userRequest  (required)
     * @return User created successfully (status code 201)
     *         or Invalid input (status code 400)
     *         or Email already registered (status code 409)
     */
    @ApiOperation(value = "Register a new user", nickname = "registerUser", notes = "", response = UserResponse.class, tags={ "User Registration", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "User created successfully", response = UserResponse.class),
        @ApiResponse(code = 400, message = "Invalid input", response = InlineResponse400.class),
        @ApiResponse(code = 409, message = "Email already registered", response = InlineResponse400.class) })
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/users/register",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<UserResponse> registerUser(@ApiParam(value = "", required = true) @Valid @RequestBody UserRequest userRequest) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"lastLogin\" : \"2000-01-23T04:56:07.000+00:00\", \"created\" : \"2000-01-23T04:56:07.000+00:00\", \"modified\" : \"2000-01-23T04:56:07.000+00:00\", \"id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"isActive\" : true, \"token\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
